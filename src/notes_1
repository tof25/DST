Problème de consistency check avec 1000 noeuds (lattence importante) entre 815 et 174
*************************************************************************************

8894.022554 -> 861 exécute connect_plitted_groups suite à Split S0 pour new_node 342 via 76
               A ce moment, 174 n'est pas encore prédécesseur de 861 en S1 et 861 est en 'p'/174

8895.330060 -> 861 reçoit et exécute ADD_PRED de 174 : 174 doit donc être prédécesseur de 861 en S1
               174 envoie cet ADD_PRED au début de load_balance() (voir 8891.902450)

8896.745069 -> 861 arrive à la fin de connect_splitted_groups et envoie CNX_GROUPS aux prédécesseurs de S1 : 815 et 69.
               Pourquoi 174 n'y est pas ??


Réponse:
********

Dans split(), on travaille sur une copie des prédécesseurs (voir lignes 6333 - 6379). Le nouveau prédécesseur est
arrivé pendant le connect_splitted_groups local (ligne 6344) et n'est donc pas pris en compte dans la boucle.

Modifier split() en conséquence.

________________________________________________________________________________________________________________________

Etude des problèmes de TIMEOUT dans les communications
******************************************************

39851.011043 -> Node 42 a reçu tous ses NUM_PRED et répond au GET_REP reçu de 893

39858.594533 -> Node 893 renonce à recevoir sa réponse parce que son timeout est atteint.
                La demande GET_REP a été envoyée en 38981.053815 (soit 877,540718 plus tôt - MAX_WAIT_GET_REP est à 500)

39859.011043 -> 42 tombe en timeout
                max_wait n'a pas été atteint puisque 42 attend depuis 8 clocks
                => c'est le timeout de 893 qui provoque celui de 42

Comment distinguer un timeout comme celui-là (il faut alors répeter la demande) de celui qui serait causé par la mort du
process récepteur ? (il faut alors abandonner)
On peut penser que si max_wait est atteint, on n'a pas le timeout et il faut arrêter. Mais en cas de timeout, il faut
recommencer. Voir s'il faut borner le nombre de nouvelles tentatives.

________________________________________________________________________________________________________________________

Problèmes d'incohérence
************************

495 est le nouveau noeud, 293 est son contact.

293 et 495 sont frères dans leurs deux tables (cohérence)

2179.078377 -> 495 reçoit la table de 293 pour rejoindre l'arbre : 2 membres à l'étage 2

2180.760944 -> 293 lance connect_splitted_groups reçu de 752 (pour 719) (752-Br_Split-719)

2181.473954 -> 293 : cpy_preds[0] reçoit 495 mais TROP TARD ??

2183.460944 -> 293 a terminé connect_splitted_groups et comporte 3 membres à l'étage 1

2221.567449 -> 495 termine load_balance et rejoint l'arbre : 2 membre à l'étage 2

POURQUOI LA DIFFUSION DE 752 N'A PAS ATTEINT 495 ?? voir 2181.473954

________________________________________________________________________________________________________________________

Autre problème d'incohérence
*****************************

37058.717246 -> 343 est inséré, reçoit la table de son contact 1962 et commence Load_Balance
             -> 343 envoie Add_Pred à 3150

37071.756249 -> 3150 reçoit et exécute cet Add_Pred

37126.217246 -> 343 envoie Get_Rep à 3150

37288.564161 -> 3150 split S0 pour accueuillir 2768

37530.755314 -> 3150 et 1957 ne sont plus frères

                ... puis 3150 est remplacé par 1957 lors de load_balance de 343 :

37369.172770 -> 343 reçoit la réponse (1957) Get_Rep de 3150 et envoie Del_Pred à 3150

37382.672770 -> 343 envoie Add_Pred à 1957

37398.156260 -> 3150 reçoit et exécute Del_Pred de 343

37408.472741 -> 1957 reçoit et exécute cet Add_Pred

37530.755314 -> 2768 est inséré par le leader 3150 : 3150 envoie Cnx_Groups à tous ses prédécesseurs de S1 mais 343 n'y est donc plus

37597.939758 -> 1962 reçoit Cnx_Groups de 3150 qui insère 2768 => ajoute un 4e membre à l'étage 1

38103.256263 -> 343 a terminé Load_Balance
             ==> il a 3 membres à l'étage 1 contre 4 pour 1962


CONCLUSION : 3150 exécute Get_Rep avant qu'il soit splitté et répond 1957 à 343 alors que 1957 ne sera plus frère de 3150 après le split.
*****************************************************************************************************************************************

REMARQUES : l'état 'p' ne semble pas dépilé par le bon Add_Pred
            END_GET_REP trop tôt et pas du bon noeud ?

________________________________________________________________________________________________________________________

Autre cas d'incohérence
************************

+-----------------------+    +-----------------+    +-----------+
| 961 | 842 | 272 | 824 |    |   6 | 658 | 884 |    | 177 | 819 |
+-----------------------+    +-----------------+    +-----------+

884 fini d'arriver par 6
Arrivée de 696 via 961 ==> split des 4 membres
884 est en load_balance à ce moment, il remplace 961 par 272 à l'étage 1

Lors du split de 272, 884 n'est pas encore son précédesseur ==> il ne reçoit pas connect_splitted_groups
Lors du split de 961, 884 n'est plus son prédécesseur ==> il ne reçoit pas connect_splitted_groups

6 envoie des SET_STATE 'p' à toute sa table (sauf étage 0)

8487.864    -> 961 passe à 'p'/884

8491.897    ->                      884 envoie des ADD_PRED à toute sa table reçue de 6 avant load_balance()

8493.264    -> 961 add_pred 884
            -> 961 plus 'p'/884
8499.097    ->                      884 envoie GET_REP à 961
8501.264    -> 961 start GET_REP
8508.988    ->                                                      272 fini SPLIT et diffuse CNX_GROUPS aux preds
                                                                        884 n'est pas encore pred
8509.264    -> 961 envoie réponse GET_REP à 884
8509.271    ->                      884 reçoit réponse GET_REP de 961
                                    884 envoie ADD_PRED à 272
8510.175    ->                                                      272 add_pred 884
8516.264    -> 961 del_pred 884
8517.090    -> 961 fini SPLIT et
                   diffuse CNX_GR
                   884 n'est plus pred de 961

