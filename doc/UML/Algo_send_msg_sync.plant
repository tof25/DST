@startuml

start

:init request data;
:create node and process mailboxes;
:create task to be sent;
:loop_cpt <-- 0;

repeat
    :send task (with isend);
    :push sent request onto proc dynar sync_answers;
    while (communication is not finished &&\nmax_wait is not reached ?)
        :sleep for a while;
    endwhile
    if (max_wait reached ?) then (yes)
        :res <-- MSG_TRANSFER_FAILURE;
        stop
    else (no)
        :res <-- comm_status;
    endif
    if (res == MSG_TIMEOUT) then (yes)
        :loop_cpt++;
    else (no)
    endif

repeat while (res == MSG_TIMEOUT && loop_cpt < max_loops ?) is (try again)

if (loop_cpt >= max_loops ||\nres != MSG_OK) then (sending failed)
    :display error message;
    stop
else (send success)
    :res <-- MSG_OK;

    note right
        reception loop to get the answer back
    end note

    while (res != MSG_TIMEOUT ||\nreq.type != GET_REP) is (answer not received yet)
        :dynar_idx <-- -1;
        :listen to answer;
        if (res != MSG_OK) then (yes)
            :display error message;
        else (no)
            if (received task is a request ?) then (request)
                if (req.type == CNX_REQ ?) then (yes)
                    :push req on tasks_queue;
                else (no)
                    :handle_task(req);
                endif
                :look into proc dynar sync_answers;
                if (answer received meanwhile ?) then (yes)
                    :pop record from sync_answers;
                    note right
                    get out of the while loop
                    end note
                    stop
                else (no)
                endif
            else (answer)
                :dynar_idx <-- expected_answers_search(proc sync_answers);
                if (dynar_idx == top of proc sync_answers\n(i.e. expected answer) ?) then (yes)
                    :pop record from sync_answers;
                    note right
                    get out of the while loop
                    end note
                    stop
                else (no)
                    if (dynar_idx > - 1 ?) then (other sync expected answer)
                        :rec_sync_answer(dynar_idx, req);
                    else (not expected answer)
                        :dynar_idx <-- expected_answers_search(proc async_answers);
                        if (dynar_idx != -1) then (async expected answer)
                            :rec_async_answer(dynar_idx, req);
                        else (not expected answer)
                            :discard answer;
                        endif
                    endif
                endif
            endif
        endif
    endwhile (stop listening)
endif

stop

@enduml
