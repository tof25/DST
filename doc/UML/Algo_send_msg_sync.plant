@startuml

start

:init req data;
:create node and process mailboxes;
:cpy_req <-- req;
:create task to be sent;
:loop_cpt <-- 0;

repeat
    :send task (with isend);
    :push sent request onto proc dynar sync_answers;
    while (communication not finished &&\nmax_wait not reached ?) is (yes)
        :sleep for a while;
    endwhile
    if (max_wait reached ?) then (yes)
        :res <-- MSG_TRANSFER_FAILURE;
        stop
    else (no)
        :res <-- comm_status;
    endif
    if (res == MSG_TIMEOUT) then (yes)
        :loop_cpt++;
    else (no)
    endif

repeat while (res == MSG_TIMEOUT && loop_cpt < max_loops ?) is (try again)

if (loop_cpt >= max_loops ||\nres != MSG_OK) then (yes : sending failed)
    :display error message;
    stop
else (no : send success)
    :res <-- MSG_OK;

    note right
        reception loop to get the answer back
    end note

    :success <-- false;

    while (success == false &&\n(res != MSG_TIMEOUT ||\ncpy_req.type != GET_REP)) is (yes : answer not received yet)
        :dynar_idx <-- -1;
        :listen to tasks;
        if (res != MSG_OK) then (yes : reception failure)
            :display error message;
        else (no : task received)
            if (request or answer ?) then (request)
                if (req.type == CNX_REQ ?) then (yes)
                    :push req on tasks_queue;
                else (no)
                    :handle_task(req);
                endif
                :look into proc dynar sync_answers;
                if (answer received meanwhile ?) then (yes)
                    :pop record from proc sync_answers;
                    :success <-- true;
                else (no)
                endif
            else (answer)
                :dynar_idx <-- expected_answers_search(ans, proc **sync_answers**);
                if (dynar_idx == top of proc sync_answers ?) then (yes : expected answer)
                    :pop record from sync_answers;
                    :success <-- true;
                else (no)
                    if (dynar_idx > - 1 ?) then (yes : other sync expected answer)
                        :rec_sync_answer(dynar_idx, ans);
                    else (not a sync expected answer)
                        :dynar_idx <-- expected_answers_search(ans, proc **async_answers**);
                        if (dynar_idx != -1) then (yes : async expected answer)
                            :rec_async_answer(dynar_idx, ans);
                        else (not expected answer)
                            :discard answer;
                        endif
                    endif
                endif
            endif
        endif
    endwhile (no : stop listening)

    if (res == MSG_TIMEOUT &&\ncpy_req.type == GET_REP) then (GET_REP timeout)
        if (proc sync_answers is not empty ?) then (yes)
            :pop GET_REP task from proc sync_answers dynar;
        else (no)
        endif
    else (no)
    endif
endif

:return res;

stop

@enduml
