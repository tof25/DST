@startuml

title
wait_for_completion()

endtitle

start

:ret <-- OK;
:dynar_size <-- size of async_answers;
:res <-- MSG_OK;
:check if async answers have already been received:\ncheck_async_nok();
:dynar_size <-- size of async_answers;

while (max_wait not reached && ans_cpt > 0 ?) is (yes)

    :listen for a task;
    if (reception failure ?) then (yes)
        :display error message;
        stop
    else (no)
        if (request or answer ?) then (request)
            if (request.type == CNX_REQ ?) then (yes)
                :push request on tasks_queue;
            else (no)
                :launch_fork_process(task);
            endif
            :check if async answers have been received meanwhile:\ncheck_async_nok();
        else (answer)
            if (answer is one of the expected async answers ?) then (yes)
                if (answer is the expected answer ?) then (yes)
                    if (answer.type == BROADCAST ||
                        answer.type == SET_UPDATE ?) then (yes)
                        :ret <-- answer.ret;
                    endif
                    :ans_cpt--;
                    :pop record from async_answers;
                    :dynar_size <-- size of async_answers;
                else (no)
                    :record answer into async_answers;
                endif
            else (no)
                if (answer is a sync expected one ?) then (yes)
                    :record answer into sync_answers;
                else (no)
                    :discard answer;
                endif
            endif
        endif
    endif
endwhile

if (max_wait reached ?) then (yes)
    :display error message;
    stop
else (no)
endif
:return ret;

stop

@enduml
