@startuml

start

if (loop_cpt >= max_loops ||\nres != MSG_OK) then (yes : sending failed)
    :display error message;
    :END;
    stop
else (no : send success)
partition Answer_Receive {
    :res <-- MSG_OK;

    :success <-- false;

    while (success == false &&\n(res != MSG_TIMEOUT ||\nreq.type != GET_REP)) is (yes : answer not received yet)
        :receive task;
        if (res == MSG_OK ?) then (no : reception failure)
            :display error message;
        else (yes : task received)
            if (request or answer ?) then (request)
                if (rcv_req.type == CNX_REQ ?) then (yes)
                    :push rcv_req on tasks_queue;
                else (no)
                    :handle_task(task);
                endif
                :look into sync_answers;
                if (answer received meanwhile ?) then (yes)
                    :pop record from sync_answers;
                    :success <-- true;
                else (no)
                endif
            else (answer)
                if (expected sync answer ?) then (yes)
                    :pop record from sync_answers;
                    :success <-- true;
                else (no)
                    if (other sync answer ?) then (yes)
                        :record rcv_ans into sync_answers;
                    else (not a sync expected answer)
                        if (async expected answer ?) then (yes)
                            :record rcv_ans into async_answers;
                        else (not expected answer)
                            :discard rcv_ans;
                        endif
                    endif
                endif
            endif
        endif
    endwhile (no : stop listening)
}
endif
stop

@enduml
