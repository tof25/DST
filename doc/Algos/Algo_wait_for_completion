********************************************************************************
*                                                                              *
*                      WAIT_FOR_COMPLETION                                     *
*                                                                              *
********************************************************************************

ret = OK                                      // valeur de retour de la fonction

Vérifie dans async_answers si des réponses attendues ont déjà été reçues.
Si oui:
   * ret = NOK si l'une des réponses est NOK
   * ajuste ans_cpt en conséquence

TantQue (pas timeout et ans_cpt > 0) Fait
｜  Attente réception message                                   // avec receive
｜  Lit données de la réponse
｜
｜  Si (message est une réponse)
｜  ｜  Si (message est une réponse async)
｜  ｜  ｜  Si (message est une des ans_cpt réponses async attendues)
｜  ｜  ｜  ｜
｜  ｜  ｜  ｜  ret = NOK dès que l'une des réponses est NOK
｜  ｜  ｜  ｜  ans_cpt --
｜  ｜  ｜  ｜  ôte la réponse de async_answers
｜  ｜  ｜  ｜
｜  ｜  ｜  Sinon
｜  ｜  ｜  ｜
｜  ｜  ｜  ｜  enregistre réponse dans requête correspondante de async_answers
｜  ｜  ｜  ｜
｜  ｜  ｜  FinSi
｜  ｜  Sinon
｜  ｜  ｜  Si (message est une réponse sync attendue)
｜  ｜  ｜  ｜
｜  ｜  ｜  ｜  enregistre réponse dans requête correspondant de sync_answers
｜  ｜  ｜  ｜
｜  ｜  ｜  Sinon
｜  ｜  ｜  ｜
｜  ｜  ｜  ｜  ignore la réponse
｜  ｜  ｜  ｜
｜  ｜  ｜  FinSi
｜  ｜  FinSi
｜  Sinon
｜  ｜  Si (remain_tasks n'est pas vide ET requête est CNX_REQ)
｜  ｜  ｜
｜  ｜  ｜  Empile requête dans remain_tasks
｜  ｜  ｜
｜  ｜  Sinon
｜  ｜  ｜
｜  ｜  ｜  traite la requête
｜  ｜  ｜
｜  ｜  FinSi
｜  ｜
｜  ｜   Vérifie dans async_answers si des réponses ont été reçues entre temps.
｜  ｜   Si oui:
｜  ｜     * ret = NOK si l'une des réponses est NOK
｜  ｜     * ajuste ans_cpt en conséquence
｜  ｜
｜  FinSi
FinTantQue

Si (timeout) stoppe le programme avec affichage d'une erreur

Retourne ret
