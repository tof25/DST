3 Arrivées de noeuds avec leader commun
***************************************
(contexte : * les échecs provoquent des stockages et pas des rejets
            * réseau lent)

* Node 14  via 121 --> 42
* Node 46  via 42
* Node 249 via 121 --> 42
* 249 provoque des scissions
***************************************************************

[ 20.000] Node 14 --CNX_REQ/14--> Node 121                               ** 1 ** Node 14 attend ACK_CNX_REQ/14 de 121 **
[ 33.016] 121 pas prêt ('b') et stocke CNX_REQ/14
[ 46.033] 121 OK

Here's node 121's routing table (with load):
+--------+--------+--------+--------+--------+  +--------+
| S0     | 42     | 121    |        |        |  | 2      |
+--------+--------+--------+--------+--------+  +--------+


          Node 121 lance CNX_REQ/14
          Node 121 --CNX_REQ/14--> Node 42                               ** 2 ** Node 121 attend ACK_CNX_REQ/14 de 42 **

[ 59.200] Node 42 reçoit CNX_REQ/14 de 121
          Node 42 --NEW_BRO_RCV/14--> 121 et attend la réponse

[ 60.000] Node 46 --CNX_REQ/46--> Node 42

[ 70.000] Node 249 --CNX_REQ/249--> Node 121

[ 72.216] Node 121 reçoit NEW_BRO_RCV/14 de 42

[ 73.016] Node 42 <--CNX_REQ/46-- Node 46
          Node 42 'u'/14 stocke CNX_REQ/46

[ 85.233] Node 121 <--CNX_REQ/249-- Node 249                            ** 3 ** Node 121 attend ACK_CNX_REQ/249 de 42 **
          Node 121 --CNX_REQ/249--> Node 42

[ 86.033] Node 42 <--ACK NEW_BRO_RCV/14-- Node 121
          Node 42 achève d'insérer 14
          Node 42 --ACK CNX_REQ/14--> Node 121 

          Node 42 traite CNX_REQ/46 stockée
          Node 42 --NEW_BRO_RCV/46--> Nodes 121 et 14

[ 99.049] Node 14 <--NEW_BRO_RCV/46-- Node 42
          Node 14 --ACK_NEW_BRO_RCV/46--> Node 42

          Node 121 <--ACK_CNX_REQ/14-- Node 42                  ** 121 attend ACK_CNX_REQ/249 et stocke cette réponse **

          Node 42 <--CNX_REQ/249-- Node 121                                    ** Node 42 'u'/46 stocke cette requête **

[112.066] Node 42 <--ACK_NEW_BRO_RCV/46-- Node 14

          Node 121 <--NEW_BRO_RCV/46-- Node 42
          Node 121 --ACK_NEW_BRO_RCV/46--> Node 42

[125.082] Node 42 <--ACK_NEW_BRO_RCV/46-- Node 121                                                  ** NODE 46 INSERE **
          Node 42 --ACK_CNX_REQ/46--> Node 46

          Node 42 lance CNX_REQ/249 et doit faire de la place
          Node 42 --ADD_STAGE/249--> Nodes 121, 14 et 46

[138.099] Node 14 <--ADD_STAGE/249-- Node 42                                   ** Node 14 'b'/14 stocke cette requête **

          Node 121 <--ADD_STAGE/249-- Node 42
          Node 121 --ACK_ADD_STAGE/249--> Node 42

          Node 46 <--ACK_CNX_REQ/46-- Node 42                       ** Node 46 fait son load balance et devient actif **

[151.115] Node 42 <--ACK_ADD_STAGE/249-- Node 121

[151.299] Node 46 <--ADD_STAGE/249-- Node 42
          Node 46 --ACK_ADD_STAGE/249--> Node 42

[164.315] Node 42 <--ACK_ADD_STAGE/249-- Node 46                             ** Ne manque plus que réponse de Node 14 **


CONCLUSION:
**********

* Node 14  --> Node 121 --> Node 42
  puis
  Node 249 --> Node 121 --> Node 42

* Node 121 reçoit bien ACK_CNX_REQ/14 de 42 mais la stocke                 [99.049]
  parce qu'il est déjà en attente de ACK_CNX_REQ/249 envoyé à 42           [85.233]

* Node 14 ne recevant pas la réponse de 121 reste en 'b'
  Il ne peut donc répondre à ADD_STAGE/249                                 [138.099]
  
==>> DEADLOCK


SOLUTION:
*********

Deux Threads ? Un pour recevoir les messages et un pour les traiter.
Plus besoin de stocker les réponses reçues non attendues, on peut les traiter tout de suite ...
